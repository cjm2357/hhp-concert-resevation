spring.application.name=concert_reservation

spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:tcp://localhost/~/test
#spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=sa

spring.jpa.hibernate.ddl-auto=create
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.database=h2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.data.redis.host=127.0.0.1
spring.data.redis.port=6379

#tomcat ??
server.tomcat.max-threads=500
server.tomcat.accept-count=1000
server.tomcat.max-connections=10000 


#kafka setting
spring.kafka.bootstrap-servers=localhost:9093
spring.kafka.consumer.group-id=test-consumer
# kafka read the oldest offset
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer


# kafka topic setting
payment.topic=payment
